{
  "author": {
    "name": "Dave Eddy",
    "email": "dave@daveeddy.com",
    "url": "http://www.daveeddy.com"
  },
  "name": "etc-passwd",
  "description": "Interface to read a standard Unix passwd and group file-format",
  "version": "0.0.1",
  "repository": {
    "url": "https://github.com/bahamas10/node-etc-passwd.git",
    "type": "git"
  },
  "main": "index.js",
  "scripts": {
    "test": "for f in examples/*.js; do node \"$f\" > /dev/null || exit 1; done"
  },
  "dependencies": {
    "lazylines": "= 1.0.0"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "keywords": [
    "etc",
    "passwd",
    "group"
  ],
  "readme": "passwd(4) and group(4)\n======================\n\nInterface to read a standard Unix passwd and group file-format\n\nInstall\n------\n\nInstall locally to use as a module\n\n    npm install etc-passwd\n\nUsage\n-----\n\nas a module\n\n``` js\nvar passwd = require('etc-passwd');\n```\n\nFunctions\n---------\n\n### passwd.getUsers([file])\n\nGet all users found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/passwd`\n\n#### .on('user', function(user) {})\n\nReturns an object whenever a user is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getUsers([file], callback(users))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of user objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of users.\n\n---\n\n### passwd.getUser({'username':'root'}, [file], callback(err, user))\n\nLook for a specific username in `file` (defaults to `/etc/passwd`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the user is found.  If the user is not found `err` will be set and `user` will be null.\nYou can specify any attribute to look for as the first argument.\n\n---\n\n### passwd.getGroups([file])\n\nGet all groups found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/group`\n\n#### .on('group', function(group) {})\n\nReturns an object whenever a group is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getGroups([file], callback(groups))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of group objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of groups.\n\n---\n\n### passwd.getGroup({'groupname':'wheel'}, [file], callback(err, group))\n\nLook for a specific groupname in `file` (defaults to `/etc/group`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the group is found.  If the group is not found `err` will be set and `group` will be null.\nYou can specify any attribute to look for as the first argument.\n\nExample\n-------\n\n### passwd.getUsers()\n\nAn example of using the EventEmitter interface to find users\n\n``` js\nvar passwd = require('passwd'),\n    users = passwd.getUsers();\n\nusers.on('user', function(user) {\n  console.log(JSON.stringify(user));\n});\nusers.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"}\n    {\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"}\n    ...\n    Done.\n\n### passwd.getUsers(callback(users))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getUsers(function(users) {\n  console.log(JSON.stringify(users));\n});\n```\n\n``` json\n[\n{\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"},\n{\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"},\n...\n]\n```\n\n### passwd.getUser()\n\nAs for a specific user on the system\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getUser({'username':'root'}, function(err, user) {\n  console.log(JSON.stringify(user));\n});\n```\n\n``` json\n{\n  \"username\": \"root\",\n  \"password\": \"*\",\n  \"uid\": 0,\n  \"gid\": 0,\n  \"comments\": \"System Administrator\",\n  \"home\": \"/var/root\",\n  \"shell\": \"/bin/sh\"\n}\n```\n\n---\n\n### passwd.getGroups()\n\nAn example of using the EventEmitter interface to find groups\n\n``` js\nvar passwd = require('passwd'),\n    groups = passwd.getGroups();\n\ngroups.on('group', function(group) {\n  console.log(JSON.stringify(group));\n});\ngroups.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n    {\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n    ...\n    Done.\n\n### passwd.getGroups(callback(groups))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getGroups(function(groups) {\n  console.log(JSON.stringify(groups));\n});\n```\n\n``` json\n[\n{\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n{\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n...\n]\n```\n\n### passwd.getGroup()\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getGroup({'groupname':'wheel'}, function(err, group) {\n  console.log(JSON.stringify(group));\n});\n```\n\n``` json\n{\n  \"groupname\": \"wheel\",\n  \"password\": \"*\",\n  \"gid\": 0,\n  \"users\": [\n    \"root\"\n  ]\n}\n```\n\nLicense\n-------\n\nMIT Licensed\n",
  "_id": "etc-passwd@0.0.1",
  "dist": {
    "shasum": "d65a9c18be2219a54e37a6eab6fa7255a5d32b60",
    "tarball": "http://registry.npmjs.org/etc-passwd/-/etc-passwd-0.0.1.tgz"
  },
  "maintainers": [
    {
      "name": "bahamas10",
      "email": "dave@daveeddy.com"
    }
  ],
  "directories": {},
  "_shasum": "d65a9c18be2219a54e37a6eab6fa7255a5d32b60",
  "_resolved": "https://registry.npmjs.org/etc-passwd/-/etc-passwd-0.0.1.tgz",
  "_from": "etc-passwd@0.0.1"
}
