{"_id":"etc-passwd","_rev":"9-4d654dcb40fc8bcab173b387d344a309","name":"etc-passwd","description":"Interface to read a standard Unix passwd and group file-format","dist-tags":{"latest":"0.1.1"},"versions":{"0.0.0":{"author":{"name":"Dave Eddy","email":"dave@daveeddy.com","url":"http://www.daveeddy.com"},"name":"etc-passwd","description":"Interface to read a standard Unix passwd and group file-format","version":"0.0.0","repository":{"url":"https://github.com/bahamas10/node-etc-passwd.git","type":"git"},"main":"index.js","scripts":{"test":"for f in examples/*.js; do node \"$f\" > /dev/null || exit 1; done"},"dependencies":{"lazylines":"= 1.0.0"},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"readme":"passwd(4) and group(4)\n======================\n\nInterface to read a standard Unix passwd and group file-format\n\nInstall\n------\n\nInstall locally to use as a module\n\n    npm install etc-passwd\n\nUsage\n-----\n\nas a module\n\n``` js\nvar passwd = require('etc-passwd');\n```\n\nFunctions\n---------\n\n### passwd.getUsers([file])\n\nGet all users found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/passwd`\n\n#### .on('user', function(user) {})\n\nReturns an object whenever a user is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getUsers([file], callback(users))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of user objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of users.\n\n---\n\n### passwd.getUser({'username':'root'}, [file], callback(err, user))\n\nLook for a specific username in `file` (defaults to `/etc/passwd`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the user is found.  If the user is not found `err` will be set and `user` will be null.\nYou can specify any attribute to look for as the first argument.\n\n---\n\n### passwd.getGroups([file])\n\nGet all groups found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/group`\n\n#### .on('group', function(group) {})\n\nReturns an object whenever a group is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getGroups([file], callback(groups))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of group objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of groups.\n\n---\n\n### passwd.getGroup({'groupname':'wheel'}, [file], callback(err, group))\n\nLook for a specific groupname in `file` (defaults to `/etc/group`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the group is found.  If the group is not found `err` will be set and `group` will be null.\nYou can specify any attribute to look for as the first argument.\n\nExample\n-------\n\n### passwd.getUsers()\n\nAn example of using the EventEmitter interface to find users\n\n``` js\nvar passwd = require('passwd'),\n    users = passwd.getUsers();\n\nusers.on('user', function(user) {\n  console.log(JSON.stringify(user));\n});\nusers.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"}\n    {\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"}\n    ...\n    Done.\n\n### passwd.getUsers(callback(users))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getUsers(function(users) {\n  console.log(JSON.stringify(users));\n});\n```\n\n    [\n    {\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"},\n    {\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"},\n    ...\n    ]\n\n### passwd.getUser()\n\nAs for a specific user on the system\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getUser({'username':'root'}, function(err, user) {\n  console.log(JSON.stringify(user));\n});\n```\n\n``` json\n{\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"}\n```\n\n---\n\n### passwd.getGroups()\n\nAn example of using the EventEmitter interface to find groups\n\n``` js\nvar passwd = require('passwd'),\n    groups = passwd.getGroups();\n\ngroups.on('group', function(group) {\n  console.log(JSON.stringify(group));\n});\ngroups.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n    {\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n    ...\n    Done.\n\n### passwd.getGroups(callback(groups))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getGroups(function(groups) {\n  console.log(JSON.stringify(groups));\n});\n```\n\n    [\n    {\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n    {\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n    ...\n    ]\n\n\n### passwd.getGroup()\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getGroup({'groupname':'wheel'}, function(err, group) {\n  console.log(JSON.stringify(group));\n});\n```\n\n``` json\n{\"groupname\":\"wheel\",\"password\":\"*\",\"gid\":0,\"users\":[\"root\"]}\n```\n\nLicense\n-------\n\nMIT Licensed\n","_id":"etc-passwd@0.0.0","dist":{"shasum":"7855261717c26abfe607fcf1f953fdf1a23882f1","tarball":"http://registry.npmjs.org/etc-passwd/-/etc-passwd-0.0.0.tgz"},"maintainers":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"directories":{}},"0.0.1":{"author":{"name":"Dave Eddy","email":"dave@daveeddy.com","url":"http://www.daveeddy.com"},"name":"etc-passwd","description":"Interface to read a standard Unix passwd and group file-format","version":"0.0.1","repository":{"url":"https://github.com/bahamas10/node-etc-passwd.git","type":"git"},"main":"index.js","scripts":{"test":"for f in examples/*.js; do node \"$f\" > /dev/null || exit 1; done"},"dependencies":{"lazylines":"= 1.0.0"},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"keywords":["etc","passwd","group"],"readme":"passwd(4) and group(4)\n======================\n\nInterface to read a standard Unix passwd and group file-format\n\nInstall\n------\n\nInstall locally to use as a module\n\n    npm install etc-passwd\n\nUsage\n-----\n\nas a module\n\n``` js\nvar passwd = require('etc-passwd');\n```\n\nFunctions\n---------\n\n### passwd.getUsers([file])\n\nGet all users found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/passwd`\n\n#### .on('user', function(user) {})\n\nReturns an object whenever a user is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getUsers([file], callback(users))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of user objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of users.\n\n---\n\n### passwd.getUser({'username':'root'}, [file], callback(err, user))\n\nLook for a specific username in `file` (defaults to `/etc/passwd`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the user is found.  If the user is not found `err` will be set and `user` will be null.\nYou can specify any attribute to look for as the first argument.\n\n---\n\n### passwd.getGroups([file])\n\nGet all groups found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/group`\n\n#### .on('group', function(group) {})\n\nReturns an object whenever a group is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getGroups([file], callback(groups))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of group objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of groups.\n\n---\n\n### passwd.getGroup({'groupname':'wheel'}, [file], callback(err, group))\n\nLook for a specific groupname in `file` (defaults to `/etc/group`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the group is found.  If the group is not found `err` will be set and `group` will be null.\nYou can specify any attribute to look for as the first argument.\n\nExample\n-------\n\n### passwd.getUsers()\n\nAn example of using the EventEmitter interface to find users\n\n``` js\nvar passwd = require('passwd'),\n    users = passwd.getUsers();\n\nusers.on('user', function(user) {\n  console.log(JSON.stringify(user));\n});\nusers.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"}\n    {\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"}\n    ...\n    Done.\n\n### passwd.getUsers(callback(users))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getUsers(function(users) {\n  console.log(JSON.stringify(users));\n});\n```\n\n``` json\n[\n{\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"},\n{\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"},\n...\n]\n```\n\n### passwd.getUser()\n\nAs for a specific user on the system\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getUser({'username':'root'}, function(err, user) {\n  console.log(JSON.stringify(user));\n});\n```\n\n``` json\n{\n  \"username\": \"root\",\n  \"password\": \"*\",\n  \"uid\": 0,\n  \"gid\": 0,\n  \"comments\": \"System Administrator\",\n  \"home\": \"/var/root\",\n  \"shell\": \"/bin/sh\"\n}\n```\n\n---\n\n### passwd.getGroups()\n\nAn example of using the EventEmitter interface to find groups\n\n``` js\nvar passwd = require('passwd'),\n    groups = passwd.getGroups();\n\ngroups.on('group', function(group) {\n  console.log(JSON.stringify(group));\n});\ngroups.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n    {\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n    ...\n    Done.\n\n### passwd.getGroups(callback(groups))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getGroups(function(groups) {\n  console.log(JSON.stringify(groups));\n});\n```\n\n``` json\n[\n{\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n{\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n...\n]\n```\n\n### passwd.getGroup()\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getGroup({'groupname':'wheel'}, function(err, group) {\n  console.log(JSON.stringify(group));\n});\n```\n\n``` json\n{\n  \"groupname\": \"wheel\",\n  \"password\": \"*\",\n  \"gid\": 0,\n  \"users\": [\n    \"root\"\n  ]\n}\n```\n\nLicense\n-------\n\nMIT Licensed\n","_id":"etc-passwd@0.0.1","dist":{"shasum":"d65a9c18be2219a54e37a6eab6fa7255a5d32b60","tarball":"http://registry.npmjs.org/etc-passwd/-/etc-passwd-0.0.1.tgz"},"maintainers":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"directories":{}},"0.1.0":{"author":{"name":"Dave Eddy","email":"dave@daveeddy.com","url":"http://www.daveeddy.com"},"name":"etc-passwd","description":"Interface to read a standard Unix passwd and group file-format","version":"0.1.0","repository":{"url":"https://github.com/bahamas10/node-etc-passwd.git","type":"git"},"main":"index.js","scripts":{"test":"for f in examples/*.js; do node \"$f\" > /dev/null || exit 1; done"},"dependencies":{"lazylines":"= 1.0.0"},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"keywords":["etc","passwd","group"],"readme":"passwd(4), shadow(4) and group(4)\n=================================\n\nInterface to read a standard Unix passwd, shadow and group file-format\n\nInstall\n------\n\n    npm install etc-passwd\n\nUsage\n-----\n\n``` js\nvar passwd = require('etc-passwd');\n```\n\nFunctions\n---------\n\n- passwd.getUsers(\n\n### passwd.getUsers([file])\n\nGet all users found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/passwd`\n\n#### .on('user', function(user) {})\n\nReturns an object whenever a user is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getUsers([file], callback(err, users))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of user objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of users.\n\n---\n\n### passwd.getUser({'username':'root'}, [file], callback(err, user))\n\nLook for a specific username in `file` (defaults to `/etc/passwd`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the user is found.  If the user is not found `err` will be set and `user` will be null.\nYou can specify any attribute to look for as the first argument.\n\n---\n\n### passwd.getGroups([file])\n\nGet all groups found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/group`\n\n#### .on('group', function(group) {})\n\nReturns an object whenever a group is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getGroups([file], callback(err, groups))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of group objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of groups.\n\n---\n\n### passwd.getGroup({'groupname':'wheel'}, [file], callback(err, group))\n\nLook for a specific groupname in `file` (defaults to `/etc/group`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the group is found.  If the group is not found `err` will be set and `group` will be null.\nYou can specify any attribute to look for as the first argument.\n\n---\n\n### passwd.getShadows([file])\n\nGet all shadow entries found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/shadow`\n\n#### .on('shadow', function(shadow) {})\n\nReturns an object whenever a shadow entry is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getShadows([file], callback(err, shadows))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of shadow objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of shadow entries.\n\n---\n\n### passwd.getShadow({'username':'root'}, [file], callback(err, shadow))\n\nLook for a specific username in `file` (defaults to `/etc/shadow`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the shadow-entry is found.  If the shadow entry is not found `err` will be set and `shadow` will be null.\nYou can specify any attribute to look for as the first argument.\n\nExample\n-------\n\n### passwd.getUsers()\n\nAn example of using the EventEmitter interface to find users\n\n``` js\nvar passwd = require('passwd'),\n    users = passwd.getUsers();\n\nusers.on('user', function(user) {\n  console.log(JSON.stringify(user));\n});\nusers.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"}\n    {\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"}\n    ...\n    Done.\n\n### passwd.getUsers(callback(users))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getUsers(function(users) {\n  console.log(JSON.stringify(users));\n});\n```\n\n``` json\n[\n{\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"},\n{\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"},\n...\n]\n```\n\n### passwd.getUser()\n\nAs for a specific user on the system\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getUser({'username':'root'}, function(err, user) {\n  console.log(JSON.stringify(user));\n});\n```\n\n``` json\n{\n  \"username\": \"root\",\n  \"password\": \"*\",\n  \"uid\": 0,\n  \"gid\": 0,\n  \"comments\": \"System Administrator\",\n  \"home\": \"/var/root\",\n  \"shell\": \"/bin/sh\"\n}\n```\n\n---\n\n### passwd.getGroups()\n\nAn example of using the EventEmitter interface to find groups\n\n``` js\nvar passwd = require('passwd'),\n    groups = passwd.getGroups();\n\ngroups.on('group', function(group) {\n  console.log(JSON.stringify(group));\n});\ngroups.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n    {\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n    ...\n    Done.\n\n### passwd.getGroups(callback(groups))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getGroups(function(groups) {\n  console.log(JSON.stringify(groups));\n});\n```\n\n``` json\n[\n{\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n{\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n...\n]\n```\n\n### passwd.getGroup()\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getGroup({'groupname':'wheel'}, function(err, group) {\n  console.log(JSON.stringify(group));\n});\n```\n\n``` json\n{\n  \"groupname\": \"wheel\",\n  \"password\": \"*\",\n  \"gid\": 0,\n  \"users\": [\n    \"root\"\n  ]\n}\n```\n\nLicense\n-------\n\nMIT Licensed\n","_id":"etc-passwd@0.1.0","dist":{"shasum":"99a0f2a84f7c86ede7fefc12bfcc1b527fd2f8cb","tarball":"http://registry.npmjs.org/etc-passwd/-/etc-passwd-0.1.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"bahamas10","email":"dave@daveeddy.com"},"maintainers":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"directories":{}},"0.1.1":{"author":{"name":"Dave Eddy","email":"dave@daveeddy.com","url":"http://www.daveeddy.com"},"name":"etc-passwd","description":"Interface to read a standard Unix passwd and group file-format","version":"0.1.1","repository":{"url":"https://github.com/bahamas10/node-etc-passwd.git","type":"git"},"main":"index.js","scripts":{"test":"for f in examples/*.js; do node \"$f\" > /dev/null || exit 1; done"},"dependencies":{"lazylines":"= 1.0.0"},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"keywords":["etc","passwd","group"],"readme":"passwd(4), shadow(4) and group(4)\n=================================\n\nInterface to read a standard Unix passwd, shadow and group file-format\n\nInstall\n------\n\n    npm install etc-passwd\n\nUsage\n-----\n\n``` js\nvar passwd = require('etc-passwd');\n```\n\nFunctions\n---------\n\n### passwd.getUsers([file])\n\nGet all users found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/passwd`\n\n#### .on('user', function(user) {})\n\nReturns an object whenever a user is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getUsers([file], callback(err, users))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of user objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of users.\n\n---\n\n### passwd.getUser({'username':'root'}, [file], callback(err, user))\n\nLook for a specific username in `file` (defaults to `/etc/passwd`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the user is found.  If the user is not found `err` will be set and `user` will be null.\nYou can specify any attribute to look for as the first argument.\n\n---\n\n### passwd.getGroups([file])\n\nGet all groups found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/group`\n\n#### .on('group', function(group) {})\n\nReturns an object whenever a group is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getGroups([file], callback(err, groups))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of group objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of groups.\n\n---\n\n### passwd.getGroup({'groupname':'wheel'}, [file], callback(err, group))\n\nLook for a specific groupname in `file` (defaults to `/etc/group`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the group is found.  If the group is not found `err` will be set and `group` will be null.\nYou can specify any attribute to look for as the first argument.\n\n---\n\n### passwd.getShadows([file])\n\nGet all shadow entries found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/shadow`\n\n#### .on('shadow', function(shadow) {})\n\nReturns an object whenever a shadow entry is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getShadows([file], callback(err, shadows))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of shadow objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of shadow entries.\n\n---\n\n### passwd.getShadow({'username':'root'}, [file], callback(err, shadow))\n\nLook for a specific username in `file` (defaults to `/etc/shadow`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the shadow-entry is found.  If the shadow entry is not found `err` will be set and `shadow` will be null.\nYou can specify any attribute to look for as the first argument.\n\nExample\n-------\n\n### passwd.getUsers()\n\nAn example of using the EventEmitter interface to find users\n\n``` js\nvar passwd = require('passwd'),\n    users = passwd.getUsers();\n\nusers.on('user', function(user) {\n  console.log(JSON.stringify(user));\n});\nusers.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"}\n    {\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"}\n    ...\n    Done.\n\n### passwd.getUsers(callback(users))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getUsers(function(users) {\n  console.log(JSON.stringify(users));\n});\n```\n\n``` json\n[\n{\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"},\n{\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"},\n...\n]\n```\n\n### passwd.getUser()\n\nAs for a specific user on the system\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getUser({'username':'root'}, function(err, user) {\n  console.log(JSON.stringify(user));\n});\n```\n\n``` json\n{\n  \"username\": \"root\",\n  \"password\": \"*\",\n  \"uid\": 0,\n  \"gid\": 0,\n  \"comments\": \"System Administrator\",\n  \"home\": \"/var/root\",\n  \"shell\": \"/bin/sh\"\n}\n```\n\n---\n\n### passwd.getGroups()\n\nAn example of using the EventEmitter interface to find groups\n\n``` js\nvar passwd = require('passwd'),\n    groups = passwd.getGroups();\n\ngroups.on('group', function(group) {\n  console.log(JSON.stringify(group));\n});\ngroups.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n    {\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n    ...\n    Done.\n\n### passwd.getGroups(callback(groups))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getGroups(function(groups) {\n  console.log(JSON.stringify(groups));\n});\n```\n\n``` json\n[\n{\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n{\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n...\n]\n```\n\n### passwd.getGroup()\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getGroup({'groupname':'wheel'}, function(err, group) {\n  console.log(JSON.stringify(group));\n});\n```\n\n``` json\n{\n  \"groupname\": \"wheel\",\n  \"password\": \"*\",\n  \"gid\": 0,\n  \"users\": [\n    \"root\"\n  ]\n}\n```\n\nLicense\n-------\n\nMIT Licensed\n","readmeFilename":"README.md","_id":"etc-passwd@0.1.1","dist":{"shasum":"a1c8990df26e1a4305f822ff618d8a144d88d169","tarball":"http://registry.npmjs.org/etc-passwd/-/etc-passwd-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"bahamas10","email":"dave@daveeddy.com"},"maintainers":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"directories":{}}},"readme":"passwd(4) and group(4)\n======================\n\nInterface to read a standard Unix passwd and group file-format\n\nInstall\n------\n\nInstall locally to use as a module\n\n    npm install etc-passwd\n\nUsage\n-----\n\nas a module\n\n``` js\nvar passwd = require('etc-passwd');\n```\n\nFunctions\n---------\n\n### passwd.getUsers([file])\n\nGet all users found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/passwd`\n\n#### .on('user', function(user) {})\n\nReturns an object whenever a user is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getUsers([file], callback(users))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of user objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of users.\n\n---\n\n### passwd.getUser({'username':'root'}, [file], callback(err, user))\n\nLook for a specific username in `file` (defaults to `/etc/passwd`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the user is found.  If the user is not found `err` will be set and `user` will be null.\nYou can specify any attribute to look for as the first argument.\n\n---\n\n### passwd.getGroups([file])\n\nGet all groups found in `file`. This functions returns an instance of `EventEmitter`.\n\nThe optional parameter `file` defaults to `/etc/group`\n\n#### .on('group', function(group) {})\n\nReturns an object whenever a group is found\n\n#### .on('end', function() {})\n\nCalled when the file is done being read\n\n### passwd.getGroups([file], callback(groups))\n\nIf a callback is supplied as the last argument, the entire file will be read at once,\nand the results will be returned as a list of group objects.  This is good for convenience,\nbut can produce unnecessary overhead on systems with a lot of groups.\n\n---\n\n### passwd.getGroup({'groupname':'wheel'}, [file], callback(err, group))\n\nLook for a specific groupname in `file` (defaults to `/etc/group`).  This will use the\nEventEmitter to avoid loading the entire file into memory and return the callback\nwhen the group is found.  If the group is not found `err` will be set and `group` will be null.\nYou can specify any attribute to look for as the first argument.\n\nExample\n-------\n\n### passwd.getUsers()\n\nAn example of using the EventEmitter interface to find users\n\n``` js\nvar passwd = require('passwd'),\n    users = passwd.getUsers();\n\nusers.on('user', function(user) {\n  console.log(JSON.stringify(user));\n});\nusers.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"}\n    {\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"}\n    ...\n    Done.\n\n### passwd.getUsers(callback(users))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getUsers(function(users) {\n  console.log(JSON.stringify(users));\n});\n```\n\n    [\n    {\"username\":\"nobody\",\"password\":\"*\",\"uid\":-2,\"gid\":-2,\"comments\":\"Unprivileged User\",\"home\":\"/var/empty\",\"shell\":\"/usr/bin/false\"},\n    {\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"},\n    ...\n    ]\n\n### passwd.getUser()\n\nAs for a specific user on the system\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getUser({'username':'root'}, function(err, user) {\n  console.log(JSON.stringify(user));\n});\n```\n\n``` json\n{\"username\":\"root\",\"password\":\"*\",\"uid\":0,\"gid\":0,\"comments\":\"System Administrator\",\"home\":\"/var/root\",\"shell\":\"/bin/sh\"}\n```\n\n---\n\n### passwd.getGroups()\n\nAn example of using the EventEmitter interface to find groups\n\n``` js\nvar passwd = require('passwd'),\n    groups = passwd.getGroups();\n\ngroups.on('group', function(group) {\n  console.log(JSON.stringify(group));\n});\ngroups.on('end', function() {\n  console.log('Done.');\n});\n```\n\n    {\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n    {\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n    ...\n    Done.\n\n### passwd.getGroups(callback(groups))\n\nUsing the callback instead of the EventEmitter to get the results\n\n``` js\nvar passwd = require('passwd');\npasswd.getGroups(function(groups) {\n  console.log(JSON.stringify(groups));\n});\n```\n\n    [\n    {\"groupname\":\"nobody\",\"password\":\"*\",\"gid\":-2,\"users\":[]}\n    {\"groupname\":\"nogroup\",\"password\":\"*\",\"gid\":-1,\"users\":[]}\n    ...\n    ]\n\n\n### passwd.getGroup()\n\n``` js\nvar passwd = require('etc-passwd');\npasswd.getGroup({'groupname':'wheel'}, function(err, group) {\n  console.log(JSON.stringify(group));\n});\n```\n\n``` json\n{\"groupname\":\"wheel\",\"password\":\"*\",\"gid\":0,\"users\":[\"root\"]}\n```\n\nLicense\n-------\n\nMIT Licensed\n","maintainers":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"time":{"modified":"2013-01-23T00:04:57.428Z","created":"2012-06-28T19:43:58.903Z","0.0.0":"2012-06-28T19:45:27.644Z","0.0.1":"2012-07-07T06:18:11.077Z","0.1.0":"2012-09-24T22:59:53.069Z","0.1.1":"2013-01-23T00:04:57.428Z"},"author":{"name":"Dave Eddy","email":"dave@daveeddy.com","url":"http://www.daveeddy.com"},"repository":{"url":"https://github.com/bahamas10/node-etc-passwd.git","type":"git"},"_attachments":{},"_etag":"\"D0NAHEHYNBG0QDZTJUC3NSQ9T\""}